import Foundation
import SwiftUI
import Supabase

@MainActor
class DatabaseConnection: ObservableObject {
    @Published var courses: [Course] = []
    @Published var isLoading: Bool = false
    
    // ‚úÖ –°–∏–Ω–≥–ª—Ç–æ–Ω
    static let shared = DatabaseConnection()
    
    private var supabase: SupabaseClient?
    private var isConfigured = false

    // ‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–π init —á—Ç–æ–±—ã –∫–ª–∞—Å—Å –Ω–µ–ª—å–∑—è –±—ã–ª–æ —Å–æ–∑–¥–∞—Ç—å –∏–∑–≤–Ω–µ
    private init() {}
    
    // ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Supabase –æ–¥–∏–Ω —Ä–∞–∑
    func configureSupabase() async {
        guard !isConfigured else { return } // –ù–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        
        do {
            if let config = loadSupabaseConfig() {
                guard let url = URL(string: config.url) else {
                    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL Supabase.")
                    return
                }
                
                supabase = SupabaseClient(supabaseURL: url, supabaseKey: config.key)
                isConfigured = true
                print("‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
            } else {
                print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ Supabase.")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase: \(error)")
        }
    }
    
    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ Secrets.plist
    private func loadSupabaseConfig() -> (url: String, key: String)? {
        guard let path = Bundle.main.path(forResource: "Secrets", ofType: "plist") else {
            print("‚ùå –§–∞–π–ª Secrets.plist –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return nil
        }

        guard let dict = NSDictionary(contentsOfFile: path) as? [String: Any] else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Secrets.plist.")
            return nil
        }

        guard let url = dict["SUPABASE_URL"] as? String,
              let key = dict["SUPABASE_KEY"] as? String else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–ª–∏ KEY –∏–∑ Secrets.plist.")
            return nil
        }

        print("üîê –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–∏–≥–∏ Supabase")
        return (url, key)
    }

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ Supabase Storage
    func getCoursesData() async {
        guard let supabase = supabase else {
            print("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        }
        
        if isLoading { return } // ‚úÖ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã

        isLoading = true
        
        do {
            let files = try await supabase.storage
                .from("schedules-data")
                .list(path: "Schedule")
            
            var loadedCourses: [Course] = []
            
            for file in files {
                print("üìÇ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: \(file.name)")
                
                let fileData = try await supabase.storage
                    .from("schedules-data")
                    .download(path: "Schedule/\(file.name)")
                
                if let course = parseCourseData(fileData) {
                    loadedCourses.append(contentsOf: course)
                }
            }
            
            self.courses = loadedCourses
            print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫—É—Ä—Å–æ–≤: \(loadedCourses.count)")
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)")
        }
        
        isLoading = false
    }
    
    // ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ JSON-—Ñ–∞–π–ª–∞
    private func parseCourseData(_ data: Data) -> [Course]? {
        do {
            let decoder = JSONDecoder()
            let courses = try decoder.decode([Course].self, from: data)
            return courses
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: \(error)")
            return nil
        }
    }
}
